apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build, konflux
  labels:
    app.kubernetes.io/version: "0.1"
    build.appstudio.redhat.com/build_type: disk-image
  name: verity
spec:
  description: "Build disk images using bootc-image-builder. https://github.com/osbuild/bootc-image-builder/"
  params:
    - description: The platform to build on
      name: PLATFORM
      type: string
    - default: "false"
      description: Whether to append a sanitized platform architecture on the IMAGE tag
      name: IMAGE_APPEND_PLATFORM
      type: string
    - name: OUTPUT_IMAGE
      type: string
      description: The output manifest list that points to the OCI artifact of the zipped image
    - name: SOURCE_ARTIFACT
      type: string
    - name: IMAGE_TYPE
      type: string
      description: The type of VM image to build, valid values are iso, qcow2, gce, vhd and raw
    - name: BIB_CONFIG_FILE
      default: bib.yaml
      type: string
      description: The config file specifying what to build and the builder to build it with
    - name: CONFIG_TOML_FILE
      default: ""
      type: string
      description: The path for the config.toml file within the source repository
    - default: etc-pki-entitlement
      description: Name of secret which contains the entitlement certificates
      name: ENTITLEMENT_SECRET
      type: string
    - name: STORAGE_DRIVER
      description: Storage driver to configure for buildah
      type: string
      default: vfs
  results:
    - description: Digest of the manifest list just built
      name: IMAGE_DIGEST
    - description: Image repository where the built manifest list was pushed
      name: IMAGE_URL
    - description: Image reference (IMAGE_URL + IMAGE_DIGEST)
      name: IMAGE_REFERENCE
  stepTemplate:
    env:
      - name: OUTPUT_IMAGE
        value: $(params.OUTPUT_IMAGE)
      - name: IMAGE_TYPE
        value: $(params.IMAGE_TYPE)
      - name: ENTITLEMENT_SECRET
        value: $(params.ENTITLEMENT_SECRET)
      - name: STORAGE_DRIVER
        value: $(params.STORAGE_DRIVER)
      - name: BUILDAH_IMAGE
        value: 'registry.access.redhat.com/ubi9/buildah:9.5-1739778322'
      - name: PLATFORM
        value: $(params.PLATFORM)
      - name: IMAGE_APPEND_PLATFORM
        value: $(params.IMAGE_APPEND_PLATFORM)
    volumeMounts:
      - mountPath: "/var/workdir"
        name: workdir
      - mountPath: "/var/lib/containers/storage"
        name: varlibcontainers
  steps:
    - name: use-trusted-artifact
      image: quay.io/konflux-ci/build-trusted-artifacts:latest@sha256:23953da08db809f841120214055aeb238bc553368e366feb58495d5a5493b19a
      args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
    - name: pull
      image: quay.io/konflux-ci/oras:latest
      script: |-
        cd /var/workdir
        oras pull "${OUTPUT_IMAGE}-qcow2-linux-root-amd64"
    - name: verity
      image: quay.io/konflux-ci/buildah-task:latest@sha256:b2d6c32d1e05e91920cd4475b2761d58bb7ee11ad5dff3ecb59831c7572b4d0c
      computeResources:
        limits:
          memory: 512Mi
        requests:
          cpu: 250m
          memory: 128Mi
      script: |-
        #!/bin/bash
        set -o verbose
        set -eu
        set -x

        mkdir -p ~/.ssh
        if [ -e "/ssh/error" ]; then
          #no server could be provisioned
          cat /ssh/error
          exit 1
        elif [ -e "/ssh/otp" ]; then
          curl --cacert /ssh/otp-ca -XPOST -d @/ssh/otp $(cat /ssh/otp-server) >~/.ssh/id_rsa
          echo "" >> ~/.ssh/id_rsa
        else
          cp /ssh/id_rsa ~/.ssh
        fi
        chmod 0400 ~/.ssh/id_rsa
        export SSH_HOST=$(cat /ssh/host)
        export BUILD_DIR=$(cat /ssh/user-dir)
        export SSH_ARGS="-o StrictHostKeyChecking=no -o ServerAliveInterval=60"

        # populate host key for rsync
        ssh -v $SSH_ARGS "$SSH_HOST" ls

        rsync -ra "/var/workdir/disk.qcow2" "$SSH_HOST:$BUILD_DIR/disk.qcow2"

        echo "
        sudo podman run --rm \
          --privileged \
          -v ${BUILD_DIR}/disk.qcow2:/disk.qcow2 \
          -v /lib/modules:/lib/modules:ro,Z \
          --user 0 \
          --security-opt=apparmor=unconfined \
          --security-opt=seccomp=unconfined \
          --mount type=bind,source=/dev,target=/dev \
          --mount type=bind,source=/run/udev,target=/run/udev \
          --env=DISK_FORMAT=qcow2 \
          --entrypoint /scripts/verity/verity.sh \
          ${OUTPUT_IMAGE}-libguestfs \
          /disk.qcow2
        " | ssh -v $SSH_ARGS "$SSH_HOST" "bash -s"

        rsync -ra "$SSH_HOST:$BUILD_DIR/disk.qcow2" "/var/workdir/disk.qcow2"
      volumeMounts:
        - mountPath: /ssh
          name: ssh
          readOnly: true
        - mountPath: /entitlement
          name: etc-pki-entitlement
    - name: push
      image: quay.io/konflux-ci/oras:latest
      script: |-
        cd /var/workdir/
        oras push \
          --artifact-type application/vnd.diskimage.qcow2.gzip \
          "$(params.OUTPUT_IMAGE)" \
          disk.qcow2
  volumes:
    - emptyDir: {}
      name: workdir
    - emptyDir: {}
      name: varlibcontainers
    - name: ssh
      secret:
        optional: false
        secretName: multi-platform-ssh-$(context.taskRun.name)
    - name: etc-pki-entitlement
      secret:
        optional: true
        secretName: $(params.ENTITLEMENT_SECRET)
